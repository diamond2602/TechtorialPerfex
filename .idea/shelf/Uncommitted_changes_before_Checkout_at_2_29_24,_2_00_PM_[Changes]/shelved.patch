Index: src/test/java/utils/BrowserUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utils;\n\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.Select;\n\nimport java.util.Set;\n\npublic class BrowserUtils {\n    public static void selectBy(WebElement location, String value, String methodName) {\n\n        Select select = new Select(location);\n        switch (methodName) {\n            case \"text\" -> select.selectByVisibleText(value);\n            case \"value\" -> select.selectByValue(value);\n            case \"index\" -> select.selectByIndex(Integer.parseInt(value));\n            default -> System.out.println(\"Method name is not available, use text,value or index\");\n        }\n\n    }\n\n    public static String getText(WebElement element) {\n        return element.getText().trim();\n\n\n    }\n\n    public static String getTitleWithJS(WebDriver driver) {\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        return js.executeScript(\"return document.title\").toString().trim();\n\n    }\n\n    public static void clickWithJS(WebDriver driver, WebElement element) {\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        js.executeScript(\"arguments[0].click()\", element);\n\n    }\n\n    public static void scrollWithJS(WebDriver driver, WebElement element) {\n        JavascriptExecutor js = (JavascriptExecutor) driver;\n        js.executeScript(\"arguments[0].scrollIntoView(true)\", element);\n\n\n    }\n\n    public static void switchById(WebDriver driver) {\n        String mainPageId = driver.getWindowHandle();\n        Set<String> allPagesId = driver.getWindowHandles();\n        for (String id : allPagesId) {\n            if (!id.equals(mainPageId)) {\n                driver.switchTo().window(id);\n            }\n        }\n    }\n\n    public static void switchByTitle(WebDriver driver, String title) {\n        Set<String> allPagesId = driver.getWindowHandles();\n        for (String id : allPagesId) {\n            driver.switchTo().window(id);\n            if (driver.getTitle().contains(title)) {\n                break;\n            }\n        }\n    }\n}
===================================================================
diff --git a/src/test/java/utils/BrowserUtils.java b/src/test/java/utils/BrowserUtils.java
--- a/src/test/java/utils/BrowserUtils.java	
+++ b/src/test/java/utils/BrowserUtils.java	
@@ -8,6 +8,7 @@
 import java.util.Set;
 
 public class BrowserUtils {
+
     public static void selectBy(WebElement location, String value, String methodName) {
 
         Select select = new Select(location);
@@ -64,4 +65,5 @@
             }
         }
     }
-}
\ No newline at end of file
+
+}
Index: src/test/java/utils/ConfigReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utils;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class ConfigReader {\n    public static String readProperty(String key){\n        File file= new File(\"configuration.properties\");\n        Properties properties= new Properties();\n        //this properties object will read teh properties file\n        try {\n            properties.load(new FileInputStream(file));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return properties.getProperty(key);\n    }\n}\n
===================================================================
diff --git a/src/test/java/utils/ConfigReader.java b/src/test/java/utils/ConfigReader.java
--- a/src/test/java/utils/ConfigReader.java	
+++ b/src/test/java/utils/ConfigReader.java	
@@ -6,6 +6,7 @@
 import java.util.Properties;
 
 public class ConfigReader {
+
     public static String readProperty(String key){
         File file= new File("configuration.properties");
         Properties properties= new Properties();
Index: src/test/java/pages/MainPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pages;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\npublic class MainPage {\n    public MainPage(WebDriver driver){\n        PageFactory.initElements(driver,this);\n    }\n    @FindBy()\n    WebElement ;\n\n    @FindBy()\n    WebElement ;\n\n    @FindBy()\n    WebElement ;\n\n    @FindBy()\n    WebElement ;\n\n    @FindBy()\n    WebElement ;\n\n    @FindBy()\n    WebElement ;\n\n\n\n}\n
===================================================================
diff --git a/src/test/java/pages/MainPage.java b/src/test/java/pages/MainPage.java
--- a/src/test/java/pages/MainPage.java	
+++ b/src/test/java/pages/MainPage.java	
@@ -7,25 +7,26 @@
 
 public class MainPage {
     public MainPage(WebDriver driver){
+
         PageFactory.initElements(driver,this);
     }
-    @FindBy()
-    WebElement ;
-
-    @FindBy()
-    WebElement ;
-
-    @FindBy()
-    WebElement ;
-
-    @FindBy()
-    WebElement ;
-
-    @FindBy()
-    WebElement ;
-
-    @FindBy()
-    WebElement ;
+//    @FindBy()
+//    WebElement ;
+//
+//    @FindBy()
+//    WebElement ;
+//
+//    @FindBy()
+//    WebElement ;
+//
+//    @FindBy()
+//    WebElement ;
+//
+//    @FindBy()
+//    WebElement ;
+//
+//    @FindBy()
+//    WebElement ;
 
 
 
Index: src/test/java/utils/DriverHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utils;\n\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.edge.EdgeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.remote.RemoteWebDriver;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.time.Duration;\n\npublic class DriverHelper {\n    private static WebDriver driver;\n\n    private DriverHelper() {\n    }\n    //I make my constructor private because I do not want anyone to create an object\n    //and manipulate my driver from this class.\n\n    public static WebDriver getDriver() {\n        if (driver==null|| ((RemoteWebDriver)driver).getSessionId()==null) {\n            String browser=\"chrome\";\n            switch (browser){\n                case \"chrome\":\n                    driver= new ChromeDriver();\n                    break;\n                case \"firefox\":\n                    driver=new FirefoxDriver();\n                    break;\n                case \"edge\":\n                    driver=new EdgeDriver();\n                    break;\n                default:\n                    driver=new ChromeDriver();\n            }\n            driver.manage().window().maximize();\n            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n            driver.manage().deleteAllCookies();//make you fresh start\n        }\n        return driver;\n\n\n//    public static WebDriver getDriver() {\n//        if (driver == null || ((RemoteWebDriver) driver).getSessionId() == null) {\n//            String browser = \"chrome\";\n//\n//            switch (browser) {\n//\n//                case \"chrome\":\n//                    String hubURL = \"http://35.174.174.118:4444\";\n//                    ChromeOptions options = new ChromeOptions();\n//                    try {\n//                        driver = new RemoteWebDriver(new URL(hubURL), options);\n//                    } catch (MalformedURLException e) {\n//                        throw new RuntimeException(e);\n//                    }\n//                    break;\n//                case \"firefox\":\n//                    driver = new FirefoxDriver();\n//                    break;\n//                default:\n//                    ChromeOptions options1 = new ChromeOptions();\n//                    options1.addArguments(\"--remote-allow-origins=*\");\n//                    driver = new ChromeDriver(options1);\n//                    break;\n//            }\n//            driver.manage().window().maximize();\n//            //   driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n//        }\n//        return driver;\n    }\n}
===================================================================
diff --git a/src/test/java/utils/DriverHelper.java b/src/test/java/utils/DriverHelper.java
--- a/src/test/java/utils/DriverHelper.java	
+++ b/src/test/java/utils/DriverHelper.java	
@@ -12,6 +12,7 @@
 import java.time.Duration;
 
 public class DriverHelper {
+
     private static WebDriver driver;
 
     private DriverHelper() {
@@ -20,55 +21,25 @@
     //and manipulate my driver from this class.
 
     public static WebDriver getDriver() {
-        if (driver==null|| ((RemoteWebDriver)driver).getSessionId()==null) {
-            String browser="chrome";
-            switch (browser){
+        if (driver == null || ((RemoteWebDriver) driver).getSessionId() == null) {
+            String browser = "chrome";
+            switch (browser) {
                 case "chrome":
-                    driver= new ChromeDriver();
+                    driver = new ChromeDriver();
                     break;
                 case "firefox":
-                    driver=new FirefoxDriver();
+                    driver = new FirefoxDriver();
                     break;
                 case "edge":
-                    driver=new EdgeDriver();
+                    driver = new EdgeDriver();
                     break;
                 default:
-                    driver=new ChromeDriver();
+                    driver = new ChromeDriver();
             }
             driver.manage().window().maximize();
             driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
             driver.manage().deleteAllCookies();//make you fresh start
         }
         return driver;
-
-
-//    public static WebDriver getDriver() {
-//        if (driver == null || ((RemoteWebDriver) driver).getSessionId() == null) {
-//            String browser = "chrome";
-//
-//            switch (browser) {
-//
-//                case "chrome":
-//                    String hubURL = "http://35.174.174.118:4444";
-//                    ChromeOptions options = new ChromeOptions();
-//                    try {
-//                        driver = new RemoteWebDriver(new URL(hubURL), options);
-//                    } catch (MalformedURLException e) {
-//                        throw new RuntimeException(e);
-//                    }
-//                    break;
-//                case "firefox":
-//                    driver = new FirefoxDriver();
-//                    break;
-//                default:
-//                    ChromeOptions options1 = new ChromeOptions();
-//                    options1.addArguments("--remote-allow-origins=*");
-//                    driver = new ChromeDriver(options1);
-//                    break;
-//            }
-//            driver.manage().window().maximize();
-//            //   driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
-//        }
-//        return driver;
+    }
     }
-}
\ No newline at end of file
